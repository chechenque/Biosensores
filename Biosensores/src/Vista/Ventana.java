/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Vista;

import Modelo.Grises;
import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author luisangel
 */
public class Ventana extends javax.swing.JFrame {
    Grises gris;
    BufferedImage imagenA;
    BufferedImage imagenB;
    static String imagen;
    /**
     * Creates new form Ventana
     */
    public Ventana() {
        initComponents();
        this.setSize(new Dimension(1920,1080));
        this.setMinimumSize(new Dimension(500,500));
        gris = new Grises();
        this.setLocationRelativeTo(null);
        imagen = "";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelA = new javax.swing.JLabel();
        labelB = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        cargarImagen = new javax.swing.JMenuItem();
        guardarImagen = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        averaging = new javax.swing.JMenuItem();
        correctness1 = new javax.swing.JMenuItem();
        correctness2 = new javax.swing.JMenuItem();
        desaturation = new javax.swing.JMenuItem();
        decompositionMax = new javax.swing.JMenuItem();
        decompositionMin = new javax.swing.JMenuItem();
        singleColorRed = new javax.swing.JMenuItem();
        singleColorGreen = new javax.swing.JMenuItem();
        singleColorBlue = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        labelA.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        labelB.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jMenu1.setText("Archivo");

        cargarImagen.setText("Cargar Imagen");
        cargarImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargarImagenActionPerformed(evt);
            }
        });
        jMenu1.add(cargarImagen);

        guardarImagen.setText("Guardar Imagen");
        guardarImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarImagenActionPerformed(evt);
            }
        });
        jMenu1.add(guardarImagen);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Opciones");

        averaging.setText("Promedio");
        averaging.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                averagingActionPerformed(evt);
            }
        });
        jMenu2.add(averaging);

        correctness1.setText("Correctud 1");
        correctness1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                correctness1ActionPerformed(evt);
            }
        });
        jMenu2.add(correctness1);

        correctness2.setText("Correctud 2");
        correctness2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                correctness2ActionPerformed(evt);
            }
        });
        jMenu2.add(correctness2);

        desaturation.setText("Desaturacion");
        desaturation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                desaturationActionPerformed(evt);
            }
        });
        jMenu2.add(desaturation);

        decompositionMax.setText("Descomposion Max");
        decompositionMax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decompositionMaxActionPerformed(evt);
            }
        });
        jMenu2.add(decompositionMax);

        decompositionMin.setText("Descomposicion Min");
        decompositionMin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decompositionMinActionPerformed(evt);
            }
        });
        jMenu2.add(decompositionMin);

        singleColorRed.setText("Canal de Color Unico Rojo");
        singleColorRed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                singleColorRedActionPerformed(evt);
            }
        });
        jMenu2.add(singleColorRed);

        singleColorGreen.setText("Canal de Color Unico Verde");
        singleColorGreen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                singleColorGreenActionPerformed(evt);
            }
        });
        jMenu2.add(singleColorGreen);

        singleColorBlue.setText("Canal de Color Unico Azul");
        singleColorBlue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                singleColorBlueActionPerformed(evt);
            }
        });
        jMenu2.add(singleColorBlue);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(125, 125, 125)
                .addComponent(labelA, javax.swing.GroupLayout.PREFERRED_SIZE, 806, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(90, 90, 90)
                .addComponent(labelB, javax.swing.GroupLayout.PREFERRED_SIZE, 777, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(76, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(136, 136, 136)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(labelB, javax.swing.GroupLayout.PREFERRED_SIZE, 637, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelA, javax.swing.GroupLayout.PREFERRED_SIZE, 637, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 285, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cargarImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargarImagenActionPerformed
        JFileChooser buscador = new JFileChooser();
        buscador.setDialogTitle("Imagen a buscar:");
        buscador.showOpenDialog(this);
        File archivo = buscador.getSelectedFile();
        if(archivo != null){
            imagen = archivo.getAbsolutePath();
            try{
                imagenA = gris.leeImagen(imagen);
            } catch(IOException ex){
                Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
            }
            rsscalelabel.RSScaleLabel.setScaleLabel(labelA, imagen);
        }
    }//GEN-LAST:event_cargarImagenActionPerformed

    private void guardarImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarImagenActionPerformed
       JFileChooser guardador = new JFileChooser();
       guardador.setDialogTitle("Guardar en:");
        guardador.showSaveDialog(this);
        File archivo = guardador.getSelectedFile();
        if(archivo != null){
            try {
                gris.guardaImagen(imagenB, archivo.getAbsolutePath());
            } catch (IOException ex) {
                Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_guardarImagenActionPerformed

    private void averagingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_averagingActionPerformed
        try{
            BufferedImage imagenC = imagenA;
            imagenB = gris.averaging(gris.leeImagen(imagen));
            gris.guardaImagen(imagenB, "./temp.png");
            rsscalelabel.RSScaleLabel.setScaleLabel(labelB,"./temp.png");
            File borrar = new File("./temp,png");
            
            System.out.println(borrar.delete());
            
            int prom = gris.obtenPromedioDeGris(imagenB);
            JOptionPane.showMessageDialog(null, "Promedio de Gris en la imagen: "+prom+"\n"+gris.concentracion(prom));
        }catch(IOException ex){
            Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_averagingActionPerformed

    private void correctness1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_correctness1ActionPerformed
       try {
            imagenB = gris.correctness(gris.leeImagen(imagen));
            gris.guardaImagen(imagenB, "./temp.png");
            rsscalelabel.RSScaleLabel.setScaleLabel(labelB,"./temp.png");
            File borrar = new File("./temp,png");
            
            System.out.println(borrar.delete());
            int prom = gris.obtenPromedioDeGris(imagenB);
            JOptionPane.showMessageDialog(null, "Promedio de Gris en la imagen: "+prom+"\n"+gris.concentracion(prom));
        } catch (IOException ex) {
            Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_correctness1ActionPerformed

    private void correctness2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_correctness2ActionPerformed
        try {
            imagenB = gris.correctness2(gris.leeImagen(imagen));
            gris.guardaImagen(imagenB, "./temp.png");
            rsscalelabel.RSScaleLabel.setScaleLabel(labelB,"./temp.png");
            File borrar = new File("./temp,png");
            
            System.out.println(borrar.delete());
            int prom = gris.obtenPromedioDeGris(imagenB);
            JOptionPane.showMessageDialog(null, "Promedio de Gris en la imagen: "+prom+"\n"+gris.concentracion(prom));
        } catch (IOException ex) {
            Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_correctness2ActionPerformed

    private void desaturationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_desaturationActionPerformed
        try {
            imagenB = gris.desaturation(gris.leeImagen(imagen));
            gris.guardaImagen(imagenB, "./temp.png");
            rsscalelabel.RSScaleLabel.setScaleLabel(labelB,"./temp.png");
            File borrar = new File("./temp,png");
            
            System.out.println(borrar.delete());
            int prom = gris.obtenPromedioDeGris(imagenB);
            JOptionPane.showMessageDialog(null, "Promedio de Gris en la imagen: "+prom+"\n"+gris.concentracion(prom));
        } catch (IOException ex) {
            Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_desaturationActionPerformed

    private void decompositionMaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decompositionMaxActionPerformed
        try {
            imagenB = gris.decompositionMax(gris.leeImagen(imagen));
            gris.guardaImagen(imagenB, "./temp.png");
            rsscalelabel.RSScaleLabel.setScaleLabel(labelB,"./temp.png");
            File borrar = new File("./temp,png");
            
            System.out.println(borrar.delete());
            int prom = gris.obtenPromedioDeGris(imagenB);
            JOptionPane.showMessageDialog(null, "Promedio de Gris en la imagen: "+prom+"\n"+gris.concentracion(prom));
        } catch (IOException ex) {
            Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_decompositionMaxActionPerformed

    private void decompositionMinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decompositionMinActionPerformed
        try {
            imagenB = gris.decompositionMin(gris.leeImagen(imagen));
            gris.guardaImagen(imagenB, "./temp.png");
            rsscalelabel.RSScaleLabel.setScaleLabel(labelB,"./temp.png");
            File borrar = new File("./temp,png");
            
            System.out.println(borrar.delete());
            int prom = gris.obtenPromedioDeGris(imagenB);
            JOptionPane.showMessageDialog(null, "Promedio de Gris en la imagen: "+prom+"\n"+gris.concentracion(prom));
        } catch (IOException ex) {
            Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_decompositionMinActionPerformed

    private void singleColorRedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_singleColorRedActionPerformed
        try {
            imagenB = gris.copia(imagenA,BufferedImage.TYPE_INT_RGB);
            //imagenB = gris.singleColorRed(gris.leeImagen(imagen));
            gris.guardaImagen(gris.singleColorRed(imagenB), "./temp.png");
            rsscalelabel.RSScaleLabel.setScaleLabel(labelB,"./temp.png");
            File borrar = new File("./temp,png");
            
            System.out.println(borrar.delete());
            int prom = gris.obtenPromedioDeGris(imagenB);
            JOptionPane.showMessageDialog(null, "Promedio de Gris en la imagen: "+prom+"\n"+gris.concentracion(prom));
        } catch (IOException ex) {
            Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_singleColorRedActionPerformed

    private void singleColorGreenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_singleColorGreenActionPerformed
        try {
            imagenB = gris.copia(imagenA,BufferedImage.TYPE_INT_RGB);
            //simagenB = gris.singleColorGreen(gris.leeImagen(imagen));
            gris.guardaImagen(gris.singleColorGreen(imagenB), "./temp.png");
            rsscalelabel.RSScaleLabel.setScaleLabel(labelB,"./temp.png");
            File borrar = new File("./temp,png");
            
            System.out.println(borrar.delete());
            int prom = gris.obtenPromedioDeGris(imagenB);
            JOptionPane.showMessageDialog(null, "Promedio de Gris en la imagen: "+prom+"\n"+gris.concentracion(prom));
        } catch (IOException ex) {
            Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_singleColorGreenActionPerformed

    private void singleColorBlueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_singleColorBlueActionPerformed
        try {
            imagenB = gris.singleColorBlue(gris.leeImagen(imagen));
            gris.guardaImagen(imagenB, "./temp.png");
            rsscalelabel.RSScaleLabel.setScaleLabel(labelB,"./temp.png");
            File borrar = new File("./temp,png");
            
            System.out.println(borrar.delete());
            
            int prom = gris.obtenPromedioDeGris(imagenB);
            JOptionPane.showMessageDialog(null, "Promedio de Gris en la imagen: "+prom+"\n"+gris.concentracion(prom));
        } catch (IOException ex) {
            Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_singleColorBlueActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventana().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem averaging;
    private javax.swing.JMenuItem cargarImagen;
    private javax.swing.JMenuItem correctness1;
    private javax.swing.JMenuItem correctness2;
    private javax.swing.JMenuItem decompositionMax;
    private javax.swing.JMenuItem decompositionMin;
    private javax.swing.JMenuItem desaturation;
    private javax.swing.JMenuItem guardarImagen;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JLabel labelA;
    private javax.swing.JLabel labelB;
    private javax.swing.JMenuItem singleColorBlue;
    private javax.swing.JMenuItem singleColorGreen;
    private javax.swing.JMenuItem singleColorRed;
    // End of variables declaration//GEN-END:variables
}
